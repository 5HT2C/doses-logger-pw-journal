package gen

import (
	"maps"
	"slices"
	"strings"

	"github.com/5HT2C/doses-logger-pw-journal/types"
	. "github.com/dave/jennifer/jen"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

const (
	pkg = "github.com/5HT2C/doses-logger-pw-journal"
)

var (
	caser = cases.Title(language.English)
	replr = strings.NewReplacer("_", " _ ", " _ ", "")
)

func Render(cfg types.AdaptiveColorConfig) error {
	genConst := make([]Code, 0)

	for _, k := range slices.Sorted(maps.Keys(cfg)) {
		s := string(k)
		sFmt := "Color" + replr.Replace(caser.String(replr.Replace(s)))

		genConst = append(genConst,
			// ColorNameExample = types.Color(NAME_EXAMPLE)
			Id(sFmt).Op("=").Qual(pkg, "Color").Call(Lit(s)),
		)
	}

	f := NewFilePathName(pkg, "types")
	f.HeaderComment("// Code generated by gen/render.go; DO NOT EDIT.")
	f.Comment(`
For more information regarding the generation process of the const color types, refer to here:
[pkg/github.com/5HT2C/doses-logger-pw-journal/gen.Render] and [AdaptiveColor.kt]

[AdaptiveColor.kt]: https://github.com/pwarchive/psychonautwiki-journal-android/blob/73f0137/app/src/main/java/com/isaakhanimann/journal/data/room/experiences/entities/AdaptiveColor.kt
`)
	f.Const().Defs(genConst...)

	return f.Save("types/const.go")
}
